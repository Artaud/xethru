// generated by jsonenums -type=respirationState; DO NOT EDIT

package xethru

import (
	"encoding/json"
	"fmt"
)

var (
	_respirationStateNameToValue = map[string]respirationState{
		"breathing":      breathing,
		"movement":       movement,
		"tracking":       tracking,
		"noMovement":     noMovement,
		"initializing":   initializing,
		"stateReserved":  stateReserved,
		"stateUnknown":   stateUnknown,
		"SomeotherState": SomeotherState,
	}

	_respirationStateValueToName = map[respirationState]string{
		breathing:      "breathing",
		movement:       "movement",
		tracking:       "tracking",
		noMovement:     "noMovement",
		initializing:   "initializing",
		stateReserved:  "stateReserved",
		stateUnknown:   "stateUnknown",
		SomeotherState: "SomeotherState",
	}
)

func init() {
	var v respirationState
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_respirationStateNameToValue = map[string]respirationState{
			interface{}(breathing).(fmt.Stringer).String():      breathing,
			interface{}(movement).(fmt.Stringer).String():       movement,
			interface{}(tracking).(fmt.Stringer).String():       tracking,
			interface{}(noMovement).(fmt.Stringer).String():     noMovement,
			interface{}(initializing).(fmt.Stringer).String():   initializing,
			interface{}(stateReserved).(fmt.Stringer).String():  stateReserved,
			interface{}(stateUnknown).(fmt.Stringer).String():   stateUnknown,
			interface{}(SomeotherState).(fmt.Stringer).String(): SomeotherState,
		}
	}
}

// MarshalJSON is generated so respirationState satisfies json.Marshaler.
func (r respirationState) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _respirationStateValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid respirationState: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so respirationState satisfies json.Unmarshaler.
func (r *respirationState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("respirationState should be a string, got %s", data)
	}
	v, ok := _respirationStateNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid respirationState %q", s)
	}
	*r = v
	return nil
}
